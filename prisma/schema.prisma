// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TagUser {
  expert
  mid
  entry
  student
}

//user schema
model User {
  user_id  String    @id @default(auto()) @map("_id") @db.ObjectId
  email    String    @unique
  name     String
  password String
  role     Role      @default(USER)
  tagUser  TagUser   @default(entry)
  profile  Profile?
  packages Package[]
  comment  Comment[]
  ratings  Rating[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

//package schema
model Package {
  package_id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name                String?
  package_description String?
  createAt            DateTime  @default(now())
  updateAt            DateTime  @updatedAt
  comments            Comment[]
  recommended         Boolean   @default(false)
  ratings             Rating[]
  rating              Int       @default(0)
  User                User?     @relation(fields: [user_id], references: [user_id])
  user_id             String?   @db.ObjectId

  @@map("packages")
}

enum Rate {
  upvote
  downvote
}

model Rating {
  rating_id  String  @id @default(auto()) @map("_id") @db.ObjectId
  user       User    @relation(fields: [user_id], references: [user_id])
  user_id    String
  package    Package @relation(fields: [package_id], references: [package_id])
  package_id String
  rate       Rate

  @@map("ratings")
}

//profile schema
model Profile {
  profile_id String @id @default(auto()) @map("_id") @db.ObjectId
  first_name String
  last_name  String

  user    User   @relation(fields: [user_id], references: [user_id])
  user_id String @unique @db.ObjectId
  @@map("profiles")
}

//comment schema
model Comment {
  comment_id String  @id @default(auto()) @map("_id") @db.ObjectId
  content    String?


  Package    Package? @relation(fields: [package_id], references: [package_id])
  package_id String?  @db.ObjectId

  User    User?   @relation(fields: [user_id], references: [user_id])
  user_id String? @db.ObjectId

  @@map("comments")
}
model Task {
  task_id    String  @id @default(auto()) @map("_id") @db.ObjectId
  input      String
  is_checked Boolean
}